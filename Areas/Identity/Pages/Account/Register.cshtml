@page
@model QuestionBank.Areas.Identity.Pages.Account.RegisterModel
@{
    ViewData["Title"] = "Register";
}

<div class="container py-5">
    <div class="row justify-content-center">
        <div class="col-md-6 col-lg-5">
            <div class="card shadow-lg border-0">
                <div class="card-body p-4">
                    <h2 class="text-center mb-4">Register</h2>

                    <form id="registerForm" method="post" asp-route-returnUrl="@Model.ReturnUrl">

                        <div class="form-floating mb-3">
                            <input asp-for="Input.Email"
                                   class="form-control"
                                   placeholder="Email (optional)"
                                   autocomplete="email"
                                   id="Input_Email" />
                            <label asp-for="Input.Email">Email (optional)</label>
                            <span asp-validation-for="Input.Email" class="text-danger invalid-feedback"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <input asp-for="Input.UserName"
                                   class="form-control"
                                   placeholder="Username"
                                   autocomplete="username"
                                   id="Input_UserName" />
                            <label asp-for="Input.UserName">Username</label>
                            <span asp-validation-for="Input.UserName" class="text-danger invalid-feedback"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <input asp-for="Input.Password"
                                   type="password"
                                   value="@Model.Input.Password"
                                   class="form-control"
                                   placeholder="Password"
                                   autocomplete="new-password" />
                            <label asp-for="Input.Password">Password</label>
                            <span asp-validation-for="Input.Password" class="text-danger invalid-feedback"></span>
                        </div>

                        <div class="form-floating mb-3">
                            <input asp-for="Input.ConfirmPassword"
                                   type="password"
                                   value="@Model.Input.ConfirmPassword"
                                   class="form-control"
                                   placeholder="Confirm Password"
                                   autocomplete="new-password" />
                            <label asp-for="Input.ConfirmPassword">Confirm Password</label>
                            <span asp-validation-for="Input.ConfirmPassword" class="text-danger invalid-feedback"></span>
                        </div>

                        <button id="registerSubmit" type="submit" class="btn btn-primary w-100">Register</button>
                    </form>

                    <div class="mt-3 text-center">
                        <a asp-page="./Login"
                           asp-route-returnUrl="@Model.ReturnUrl">
                            Login
                        </a>
                    </div>
                </div>
            </div>

            @if ((Model.ExternalLogins?.Count ?? 0) > 0)
            {
                <div class="card mt-4 shadow-sm border-0">
                    <div class="card-body text-center">
                        <h5 class="mb-3">Or register using</h5>
                        <form asp-page="./ExternalLogin" asp-route-returnUrl="@Model.ReturnUrl" method="post">
                            @foreach (var prov in Model.ExternalLogins!)
                            {
                                <button type="submit"
                                        class="btn btn-outline-primary me-2 mb-2"
                                        name="provider"
                                        value="@prov.Name">
                                    @prov.DisplayName
                                </button>
                            }
                        </form>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@section Scripts {
  <partial name="_ValidationScriptsPartial" />

  <script>
    const verifyUrl = {
      user:  '@Url.Page("/Account/Register", "VerifyUsername", new { area = "Identity" })',
      email: '@Url.Page("/Account/Register", "VerifyEmail", new { area = "Identity" })'
    };

    function handleValidation($field, serverOk, serverMsg) {
      const $fb = $field.closest('.form-floating').find('.invalid-feedback');
      const clientOk = $field.valid();
      const isValid = clientOk && serverOk;

      $field.toggleClass('is-invalid', !isValid)
            .toggleClass('is-valid', isValid);

      if (!isValid) {
        const msg = clientOk ? serverMsg : $fb.text();
        $fb.text(msg).addClass('d-block');
      } else {
        $fb.text('').removeClass('d-block');
      }
    }

    function triggerAjaxValidation(selector, url, paramName, errorMsg) {
      const $f = $(selector);
      const val = $f.val().trim();
      if (!val) {
        handleValidation($f, true, '');
        return;
      }
      $.get(url, { [paramName]: val })
       .done(ok => handleValidation($f, ok, errorMsg));
    }

    function validatePasswordStrength() {
      const $f = $('#Input_Password');
      const val = $f.val();
      const strong = new RegExp("^(?=.*[a-z])(?=.*[A-Z])(?=.*\\d)(?=.*[@@$!%*?&#]).{8,}$");
      const ok = strong.test(val);
      handleValidation($f, ok, 'Password must include upper, lower, number and special.');
    }

    function validatePasswordMatch() {
      const $f = $('#Input_ConfirmPassword');
      const match = $f.val() === $('#Input_Password').val();
      handleValidation($f, match, 'Passwords do not match.');
    }

    $(function () {
      // Trigger validation on blur
      $('#Input_UserName').on('blur', () =>
        triggerAjaxValidation('#Input_UserName', verifyUrl.user, 'userName', 'Username is already taken.')
      );

      $('#Input_Email').on('blur', () =>
        triggerAjaxValidation('#Input_Email', verifyUrl.email, 'email', 'Email is already in use.')
      );

      $('#Input_Password').on('blur', validatePasswordStrength);
      $('#Input_ConfirmPassword').on('blur', validatePasswordMatch);

      // Initial pre-filled values (e.g., from query string)
      ['#Input_UserName', '#Input_Email', '#Input_Password', '#Input_ConfirmPassword'].forEach(id => {
        if ($(id).val().trim()) {
          $(id).trigger('blur');
        }
      });

      // On form submit: trigger all validations and prevent submission if invalid
      $('#registerForm').on('submit', function (e) {
        e.preventDefault();

        $('#Input_UserName').trigger('blur');
        $('#Input_Email').trigger('blur');
        $('#Input_Password').trigger('blur');
        $('#Input_ConfirmPassword').trigger('blur');

        setTimeout(() => {
          if ($(this).find('.is-invalid').length === 0) {
            $(this).off('submit').submit();
          }
        }, 150);
      });
    });
  </script>
}